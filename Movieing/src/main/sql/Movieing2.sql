
/* Drop Tables */

DROP TABLE auth_security CASCADE CONSTRAINTS;
DROP TABLE BUY CASCADE CONSTRAINTS;
DROP TABLE CALENDAR CASCADE CONSTRAINTS;
DROP TABLE COMMENT_TABLE CASCADE CONSTRAINTS;
DROP TABLE EVALUATION CASCADE CONSTRAINTS;
DROP TABLE FILMOGRAPHY CASCADE CONSTRAINTS;
DROP TABLE FOLLOW CASCADE CONSTRAINTS;
DROP TABLE GOODS CASCADE CONSTRAINTS;
DROP TABLE LIKE_REVIEW CASCADE CONSTRAINTS;
DROP TABLE MOVIE_PRICE CASCADE CONSTRAINTS;
DROP TABLE REVIEW CASCADE CONSTRAINTS;
DROP TABLE STILLCUT CASCADE CONSTRAINTS;
DROP TABLE WISH CASCADE CONSTRAINTS;
DROP TABLE MOVIE CASCADE CONSTRAINTS;
DROP TABLE MOVIE_PEOPLE CASCADE CONSTRAINTS;
DROP TABLE NOTICE CASCADE CONSTRAINTS;
DROP TABLE QNA CASCADE CONSTRAINTS;
DROP TABLE REALTIME_SEARCH CASCADE CONSTRAINTS;
DROP TABLE TAG CASCADE CONSTRAINTS;
DROP TABLE USER_TABLE CASCADE CONSTRAINTS;




/* Create Tables */

CREATE TABLE auth_security
(
	ENABLED number DEFAULT 1,
	AUTHORITY varchar2(20) DEFAULT 'ROLE_USER',
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	PRIMARY KEY (USER_ID)
);


CREATE TABLE BUY
(
	-- 상품번호
	GOODS_NO number(10) NOT NULL,
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	QUANTITY number(10),
	BUYDATE date DEFAULT SYSDATE
);


CREATE TABLE CALENDAR
(
	-- 이벤트이름
	EVENT_NAME nvarchar2(50) NOT NULL,
	-- 이벤트 내용
	EVENT_CONTENT nvarchar2(2000) NOT NULL,
	-- 이벤트 시작 날짜
	EVENT_START date NOT NULL,
	-- 이벤트 종료 날짜
	EVENT_END date NOT NULL,
	-- 이벤트 발생 장소
	EVENT_PLACE nvarchar2(50) NOT NULL,
	PRIMARY KEY (EVENT_NAME)
);


CREATE TABLE COMMENT_TABLE
(
	-- 댓글번호
	COMMENT_NO number(10) NOT NULL,
	-- 댓글내용
	COMMENT_CONTENT nvarchar2(500) NOT NULL,
	-- 댓글작성일
	COMMENT_DATE date DEFAULT SYSDATE NOT NULL,
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	-- 리뷰 고유번호
	REVIEW_NO number(10) NOT NULL,
	PRIMARY KEY (COMMENT_NO)
);


CREATE TABLE EVALUATION
(
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	-- 영화진흥원 코드
	-- 
	MOVIE_NO nvarchar2(15) NOT NULL,
	-- 사용자가 영화를 평가한 점수
	EVALUATION_GRADE number(3,0) NOT NULL,
	-- 사용자가 영화를 평가한 날짜
	EVALUATION_DATE date DEFAULT SYSDATE NOT NULL,
	PRIMARY KEY (USER_ID, MOVIE_NO)
);


CREATE TABLE FILMOGRAPHY
(
	-- 영화진흥원 코드
	-- 
	MOVIE_NO nvarchar2(15) NOT NULL,
	-- 영화인번호
	MOVIE_PEOPLE_NO nvarchar2(10) NOT NULL,
	PRIMARY KEY (MOVIE_NO, MOVIE_PEOPLE_NO)
);


CREATE TABLE FOLLOW
(
	-- 팔로잉 당하는 유저 아이디
	FOLLOWING nvarchar2(10) NOT NULL,
	-- 팔로우 하는 유저 아이디
	FOLLOWER nvarchar2(10) NOT NULL,
	PRIMARY KEY (FOLLOWING, FOLLOWER)
);


CREATE TABLE GOODS
(
	-- 상품번호
	GOODS_NO number(10) NOT NULL,
	NAMING nvarchar2(50) NOT NULL,
	PRICE number(10) NOT NULL,
	PRIMARY KEY (GOODS_NO)
);


CREATE TABLE LIKE_REVIEW
(
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	-- 리뷰 고유번호
	REVIEW_NO number(10) NOT NULL,
	-- 좋아요 한 날짜
	-- 
	LIKE_DATE date DEFAULT SYSDATE NOT NULL,
	PRIMARY KEY (USER_ID, REVIEW_NO)
);


CREATE TABLE MOVIE
(
	-- 영화진흥원 코드
	-- 
	MOVIE_NO nvarchar2(15) NOT NULL,
	-- 영화 제목
	MOVIE_TITLE nvarchar2(50) NOT NULL,
	-- 영화 줄거리
	MOVIE_CONTENT nvarchar2(2000),
	-- 영화 관람 등급
	MOVIE_GRADE nvarchar2(50),
	-- 영화 개봉 년도
	MOVIE_YEAR number(4,0),
	-- 영화 원제목
	MOVIE_ORG_TITLE nvarchar2(50),
	-- 영화 제작 국가
	MOVIE_COUNTRY nvarchar2(50),
	-- 영화 장르
	MOVIE_GENRE nvarchar2(50),
	-- 네이버 영화 코드
	-- 
	NAVER_CODE nvarchar2(10) NOT NULL,
	PRIMARY KEY (MOVIE_NO)
);


CREATE TABLE MOVIE_PEOPLE
(
	-- 영화인번호
	MOVIE_PEOPLE_NO nvarchar2(10) NOT NULL,
	-- 영화인 이름
	MOVIE_PEOPLE_NAME nvarchar2(50) NOT NULL,
	-- 영화인 생년월일
	MOVIE_PEOPLE_BIRTH nvarchar2(20),
	-- 감독인지/배우인지 구분
	MOVIE_PEOPLE_JOB nvarchar2(10),
	-- 영화인국적
	MOVIE_PEOPLE_COUNTRY nvarchar2(50),
	PRIMARY KEY (MOVIE_PEOPLE_NO)
);


CREATE TABLE MOVIE_PRICE
(
	-- VOD제공처
	PROVIDER nvarchar2(50) NOT NULL,
	-- 영화진흥원 코드
	-- 
	MOVIE_NO nvarchar2(15) NOT NULL,
	-- VOD가격
	PRICE number(10) NOT NULL,
	PRIMARY KEY (PROVIDER, MOVIE_NO)
);


CREATE TABLE NOTICE
(
	-- 공지사항 번호
	-- 
	NOTI_NO number(10) NOT NULL,
	-- 공지사항 제목
	NOTI_TITLE nvarchar2(50) NOT NULL,
	-- 공지내용
	NOTI_CONTENT nvarchar2(2000) NOT NULL,
	-- 공지 날짜
	NOTI_DATE date DEFAULT SYSDATE,
	PRIMARY KEY (NOTI_NO)
);


CREATE TABLE QNA
(
	-- 문의번호
	-- 
	QNA_NO number(10) NOT NULL,
	-- 문의제목
	QNA_TITLE nvarchar2(50) NOT NULL,
	-- 문의내용
	QNA_CONTENT nvarchar2(2000) NOT NULL,
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	-- 문의 작성일
	POSTDATE date DEFAULT SYSDATE NOT NULL,
	-- 문의답변
	-- (댓글)
	QNA_ANSWER nvarchar2(2000),
	PRIMARY KEY (QNA_NO)
);


CREATE TABLE REALTIME_SEARCH
(
	-- 키워드 명
	KEYWORD nvarchar2(50) NOT NULL,
	-- 검색 된 수 
	COUNT number(30) NOT NULL,
	PRIMARY KEY (KEYWORD)
);


CREATE TABLE REVIEW
(
	-- 리뷰 고유번호
	REVIEW_NO number(10) NOT NULL,
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	-- 영화진흥원 코드
	-- 
	MOVIE_NO nvarchar2(15) NOT NULL,
	-- 리뷰 내용
	REVIEW_CONTENT nvarchar2(2000) NOT NULL,
	-- 리뷰작성날짜
	REVIEW_POSTDATE date DEFAULT SYSDATE NOT NULL,
	-- 공개여부
	-- 공개/비공개/팔로워공개
	PUBLIC_PRIVATE nvarchar2(20) NOT NULL,
	PRIMARY KEY (REVIEW_NO)
);


CREATE TABLE STILLCUT
(
	-- 스틸컷 번호
	STILLCUT_NO nvarchar2(10) NOT NULL,
	-- 이미지
	STILLCUT_IMAGE blob NOT NULL,
	-- 영화진흥원 코드
	-- 
	MOVIE_NO nvarchar2(15) NOT NULL,
	PRIMARY KEY (STILLCUT_NO)
);


CREATE TABLE TAG
(
	TAG nvarchar2(50) NOT NULL,
	GENRE nvarchar2(50) NOT NULL,
	PRIMARY KEY (TAG)
);


CREATE TABLE USER_TABLE
(
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	-- 사용자 비밀번호
	USER_PWD nvarchar2(100) NOT NULL,
	-- 유저 이름
	USER_NAME nvarchar2(10) NOT NULL,
	-- 사용자 닉네임
	USER_NICK nvarchar2(10) NOT NULL,
	-- 사용자 휴대폰 번호
	USER_CONTACT nvarchar2(11) NOT NULL,
	-- 사용자 이메일 주소
	USER_MAIL nvarchar2(30) NOT NULL,
	-- 사용가 가입 날짜
	USER_SIGNUP_DATE date DEFAULT SYSDATE NOT NULL,
	-- 사용자 프로필 사진
	USER_PROFILE nvarchar2(1000),
	-- 사용자 자기 소개
	USER_SELF nvarchar2(2000) NOT NULL,
	ADMIN nvarchar2(2) DEFAULT 'N' NOT NULL,
	PRIMARY KEY (USER_ID)
);


CREATE TABLE WISH
(
	-- 유저아이디
	USER_ID nvarchar2(10) NOT NULL,
	-- 영화진흥원 코드
	-- 
	MOVIE_NO nvarchar2(15) NOT NULL,
	-- 보고싶어요 한 날짜
	WISH_DATE date DEFAULT SYSDATE,
	PRIMARY KEY (USER_ID, MOVIE_NO)
);



/* Create Foreign Keys */

ALTER TABLE BUY
	ADD FOREIGN KEY (GOODS_NO)
	REFERENCES GOODS (GOODS_NO)
;


ALTER TABLE EVALUATION
	ADD FOREIGN KEY (MOVIE_NO)
	REFERENCES MOVIE (MOVIE_NO)
;


ALTER TABLE FILMOGRAPHY
	ADD FOREIGN KEY (MOVIE_NO)
	REFERENCES MOVIE (MOVIE_NO)
;


ALTER TABLE MOVIE_PRICE
	ADD FOREIGN KEY (MOVIE_NO)
	REFERENCES MOVIE (MOVIE_NO)
;


ALTER TABLE REVIEW
	ADD FOREIGN KEY (MOVIE_NO)
	REFERENCES MOVIE (MOVIE_NO)
;


ALTER TABLE STILLCUT
	ADD FOREIGN KEY (MOVIE_NO)
	REFERENCES MOVIE (MOVIE_NO)
;


ALTER TABLE WISH
	ADD FOREIGN KEY (MOVIE_NO)
	REFERENCES MOVIE (MOVIE_NO)
;


ALTER TABLE FILMOGRAPHY
	ADD FOREIGN KEY (MOVIE_PEOPLE_NO)
	REFERENCES MOVIE_PEOPLE (MOVIE_PEOPLE_NO)
;


ALTER TABLE COMMENT_TABLE
	ADD CONSTRAINT FK_DELETE FOREIGN KEY (REVIEW_NO)
	REFERENCES REVIEW (REVIEW_NO)  on delete cascade
;


ALTER TABLE LIKE_REVIEW
	ADD FOREIGN KEY (REVIEW_NO)
	REFERENCES REVIEW (REVIEW_NO)  on delete cascade
;


ALTER TABLE auth_security
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE BUY
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE COMMENT_TABLE
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE EVALUATION
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE FOLLOW
	ADD FOREIGN KEY (FOLLOWING)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE FOLLOW
	ADD FOREIGN KEY (FOLLOWER)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE LIKE_REVIEW
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE QNA
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE REVIEW
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;


ALTER TABLE WISH
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TABLE (USER_ID)  on delete cascade
;



