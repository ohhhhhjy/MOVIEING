<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mybatis.Review">
	
	<!-- 내가 쓴 리뷰 리스트 -->
	<select id="reviewSelectMyList"  parameterType="java.util.Map" resultType="ReviewDto">
		select r.USER_ID,r.REVIEW_CONTENT ,r.REVIEW_POSTDATE,r.REVIEW_NO,r.MOVIE_NO, 
		movie_title,movie_img,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
		WHERE USER_ID=#{id}
	</select>
	<!-- 내가 쓴 전체 리스트 가져오기(시간순으로) -->
	<select id="selectList"  parameterType="java.util.Map" resultType="ReviewDto">
		select r.*, 
		movie_title,movie_img,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no
		WHERE USER_ID=#{id}	
		Order by REVIEW_POSTDATE desc
	</select>
	
	<!-- 쓰지마-->
	<select id="selectFriendsList"  parameterType="java.util.Map" resultType="ReviewDto">
		select r.USER_ID,r.REVIEW_CONTENT ,r.REVIEW_POSTDATE,r.REVIEW_NO,r.MOVIE_NO, 
		movie_title,movie_img,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where user_id= r.user_id and review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where user_id= r.user_id and review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
		WHERE PUBLIC_PRIVATE='Y'
		
	</select>
	
	<!-- 내가 좋아요 누른 리뷰 리스트 (타인의 리뷰)-->
	<select id="reviewSelectLikeList" parameterType="java.util.Map" resultType="ReviewDto">
        select r.*, 
		movie_title,movie_img,
		user_nick,
		user_profile,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
		join user_table u on u.user_id=r.user_id
		where review_no in (select review_no from like_review where user_id=#{id})
	</select>
	
	<!-- 전체공개한 리스트만 가져오기 (모두 남에꺼 내꺼포함)(시간순으로)-->
	<select id="friendsReviewList1" parameterType="java.util.Map" resultType="ReviewDto">
	
	     select r.*, 
		MOVIE_TITLE ,movie_img,
		MOVIE_ORG_TITLE ,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount,
		(select USER_NICK from user_table where review_no = r.review_no and user_id= r.user_id) userNick
		from review r
		join movie m on r.movie_no=m.movie_no 
		WHERE PUBLIC_PRIVATE='Y'
		Order by REVIEW_POSTDATE desc
	</select>
	
	<!-- 팔로우한 리스트만 가져오기 (남의꺼 내꺼제외)(시간순으로)-->

	<select id="friendsReviewListFollower" parameterType="java.util.Map" resultType="ReviewDto">
	
	       select r.*, 
		m.*,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount,
		(select USER_NICK from user_table where review_no = r.review_no and user_id= r.user_id) userNick
		from review r,movie m,follow f
		WHERE PUBLIC_PRIVATE='Y' and f.following!=#{id} and r.movie_no=m.movie_no and f.following=r.user_id  
		Order by REVIEW_POSTDATE desc

	</select>

	

	
	<!-- 댓글 -->
	<!-- 
	
		(select COMMENT_CONTENT from COMMENT_TABLE where review_no = r.review_no) commentContent,
		(select COMMENT_DATE  from COMMENT_TABLE where review_no = r.review_no) commentDate,
		(select USER_ID from COMMENT_TABLE where review_no = r.review_no ) as commentId
	 -->
	

	<select id="selectMovieingOne" parameterType="java.util.Map" resultType="ReviewDto">
		select *  from USER_TABLE 
		where USER_ID=#{id}
		
	</select>
	
	<select id="reviewTotal" parameterType="java.util.Map" resultType="int">
		select count(*) from review
		where USER_ID=#{id}
	</select>
	
	<select id="selectMyPageList" parameterType="java.util.Map" resultType="ReviewDto">
		select * from USER_TABLE
		where USER_ID=#{id}
	</select>
	
	<!-- 리뷰 안쓴 -->
	<select id="selectNotReviewList" parameterType="java.util.Map" resultType="ReviewDto">
	    select * from movie 
        where movie_no in (select movie_no from evaluation where user_id=#{id}) 
        and  movie_no  not in (select movie_no from review where user_id=#{id})
	</select>
	
	<!-- 리뷰 값 넣기 -->
	<insert id="insertReview" parameterType="java.util.Map">
		insert into REVIEW 
		values (seq_review.nextval,#{id},#{movieNo},#{reviewContent },SYSDATE,#{publicPrivate })
	</insert>

	<select id="selectReviewList" parameterType="java.util.Map" resultType="ReviewDto">
	select * from review
	where USER_ID=#{id}
	</select>
	
	<!-- 모든 리뷰넘버들만 가져오기 -->
	<select id="selectReviewNos" parameterType="java.util.Map" resultType="ReviewDto">
		select REVIEW_NO from review
	</select>

	<!-- 한 영화의 리뷰 총 갯수 -->
	<select id="getTotalMovieReviewCount" parameterType="java.util.Map" resultType="int">
		select count(*) from review
		where movie_no=#{movieNo}
	</select>

	<!--한영화의 리뷰들 (페이지네이션 처리됨) -->
	<select id="selectMovieReviewList"  parameterType="java.util.Map" resultType="ReviewDto">
    select * from (select t.*,rownum rn from (select r.*, 
        user_nick,
        user_profile,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
        join user_table u on u.user_id=r.user_id
		WHERE r.movie_no = #{movieNo}
		order by r.review_no desc) t) where rn between #{start} and #{end}
	</select>
	
	<!-- 리뷰상세페이지에 뿌릴 한개의 리뷰 셀렉트 -->
	<select id="reviewSelectOne" parameterType="java.util.Map" resultType="ReviewDto">
		select r.*, 
		movie_title,movie_img,
		user_nick,
        user_profile,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
		join user_table u on u.user_id=r.user_id
		WHERE r.review_no = #{reviewNo}
	</select>
	
	<!-- 내가 쓴 글 지우기 -->
	<delete id="reviewDelete" parameterType="java.util.Map">
		delete review
		where user_id=#{id} and REVIEW_NO =#{reviewNo}	
	</delete>	
	
		<!-- 리뷰검색 -->
	<select id="selectSearchReviewList" parameterType="java.util.Map" resultType="ReviewDto">
		select * from review
		where REVIEW_CONTENT LIKE #{%searchWord}
		OR REVIEW_CONTENT LIKE #{searchWord%}
		OR REVIEW_CONTENT LIKE #{%searchWord%}
	</select>
	
		<!-- 좋아요수 많은 인기 리뷰3개 -->
	<select id="selectBestReviewList" resultType="ReviewDto">
		select r.*, u.*,m.* 
		from review r 
		join user_table u on r.user_id = u.user_id 
		join movie m on r.movie_no = m.movie_no
        order by 
        (select count(*) from like_review where review_no = r.review_no) DESC
	</select>
	
	


	
</mapper>