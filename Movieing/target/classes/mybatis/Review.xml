<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mybatis.Review">
	
	<!-- 내가 쓴 리뷰 리스트 -->
	<select id="reviewSelectMyList"  parameterType="java.util.Map" resultType="ReviewDto">
		select r.USER_ID,r.REVIEW_CONTENT ,r.REVIEW_POSTDATE,r.REVIEW_NO,r.MOVIE_NO, 
		movie_title,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where user_id= r.user_id and review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where user_id= r.user_id and review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
		WHERE USER_ID=#{id}
		
	</select>
	<!-- 내가 쓴 전체 리스트 가져오기(시간순으로) -->
	<select id="selectList"  parameterType="java.util.Map" resultType="ReviewDto">
		select r.*, 
		movie_title,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where user_id= r.user_id and review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where user_id= r.user_id and review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no
		WHERE USER_ID=#{id}	
		Order by REVIEW_POSTDATE desc
	</select>
	
	<!-- 쓰지마-->
	<select id="selectFriendsList"  parameterType="java.util.Map" resultType="ReviewDto">
		select r.USER_ID,r.REVIEW_CONTENT ,r.REVIEW_POSTDATE,r.REVIEW_NO,r.MOVIE_NO, 
		movie_title,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where user_id= r.user_id and review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where user_id= r.user_id and review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
		WHERE PUBLIC_PRIVATE='Y'
		
	</select>
	
	<!-- 내가 좋아요 누른 리뷰 리스트 (타인의 리뷰)-->
	<select id="reviewSelectLikeList" parameterType="java.util.Map" resultType="ReviewDto">
        select r.*, 
		movie_title,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount
		from review r  
		join movie m on r.movie_no=m.movie_no 
		where review_no in (select review_no from like_review where user_id=#{id})
	</select>
	
	<!-- 전체공개한 리스트만 가져오기 (모두 남에꺼 내꺼포함)(시간순으로)-->
	<select id="friendsReviewList1" parameterType="java.util.Map" resultType="ReviewDto">
	
	     select r.*, 
		MOVIE_TITLE ,
		MOVIE_ORG_TITLE ,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount
		from review r
		join movie m on r.movie_no=m.movie_no 
		WHERE PUBLIC_PRIVATE='Y'
		Order by REVIEW_POSTDATE desc
	</select>
	
	
		<!-- 전체공개한 리스트만 가져오기 (모두 남에꺼 내꺼포함)(종아료순으로)-->
	<select id="friendsReviewList2" parameterType="java.util.Map" resultType="ReviewDto">
	
	     select r.*, 
		MOVIE_TITLE ,
		MOVIE_ORG_TITLE ,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount
		from review r
		join movie m on r.movie_no=m.movie_no 
		WHERE PUBLIC_PRIVATE='Y'
		Order by likeCount desc
	</select>
	
	
	
		<!-- 전체공개한 리스트만 가져오기 (모두 남에꺼 내꺼포함)(댓글순으로)-->
	<select id="friendsReviewList3" parameterType="java.util.Map" resultType="ReviewDto">
	
	     select r.*, 
		MOVIE_TITLE ,
		MOVIE_ORG_TITLE ,
		(select EVALUATION_GRADE  from evaluation where user_id= r.user_id and movie_no = r.movie_no) grade,
		(select count(*) from LIKE_REVIEW  where  review_no = r.review_no) likeCount,
		(select count(*) from COMMENT_TABLE where  review_no = r.review_no) commentCount
		from review r
		join movie m on r.movie_no=m.movie_no 
		WHERE PUBLIC_PRIVATE='Y'
		Order by commentCount desc
	</select>
	
	
	
	<!-- 댓글 -->
	<!-- 
	
		(select COMMENT_CONTENT from COMMENT_TABLE where review_no = r.review_no) commentContent,
		(select COMMENT_DATE  from COMMENT_TABLE where review_no = r.review_no) commentDate,
		(select USER_ID from COMMENT_TABLE where review_no = r.review_no ) as commentId
	 -->
	

	<select id="selectMovieingOne" parameterType="java.util.Map" resultType="ReviewDto">
		select *  from USER_TABLE 
		where USER_ID=#{id}
		
	</select>
	
	<select id="reviewTotal" parameterType="java.util.Map" resultType="int">
		select count(*) from review
		where USER_ID=#{id}
	</select>
	
	<select id="selectMyPageList" parameterType="java.util.Map" resultType="ReviewDto">
		select * from USER_TABLE
		where USER_ID=#{id}
	</select>
	
	<!-- 리뷰 안쓴 -->
	<select id="selectNotReviewList" parameterType="java.util.Map" resultType="ReviewDto">

	   select m.MOVIE_TITLE,m.movie_genre,m.MOVIE_YEAR,m.MOVIE_COUNTRY  from MOVIE m
        where MOVIE_NO in
        (select e.MOVIE_NO from EVALUATION e,USER_TABLE u
        where e.MOVIE_NO not in (select r.MOVIE_NO from REVIEW r)
        and u.USER_ID=#{id})
   
	</select>
	
	<!-- 리뷰 값 넣기 -->
	<insert id="insertReview" parameterType="java.util.Map">
		insert into REVIEW 
		values (seq_review.nextval,#{id},#{movieNo},#{reviewContent },SYSDATE,#{publicPrivate })
	</insert>

	<select id="selectReviewList" parameterType="java.util.Map" resultType="ReviewDto">
	select * from review
	where USER_ID=#{id}
	</select>
	
	<!-- 모든 리뷰넘버들만 가져오기 -->
	<select id="selectReviewNos" parameterType="java.util.Map" resultType="ReviewDto">
		select REVIEW_NO from review
	</select>



</mapper>